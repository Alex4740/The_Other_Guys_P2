             Test Strategy For The Other Guys:

    API guidelines:

		API should be RESTful
		The API shall be written in Java using Javalin

		The route to be used shall be as follows:
			/login (POST verb will be used at this endpoint to login)

			/client (used for miscellaneous actions not yet considered)
			        /requests
			          GET to view request status
			          POST to create
			          PATCH to update
			          DELETE to cancel

			/tech
			        /requests
                      GET to view request status
                    /tickets
                      POST to create ticket
                      PATCH to update
                      DELETE to cancel
                    /info
                      PATCH to update


	Workflow guidelines:

		Version control will be handled via the use of a github repository and the use of branching
			https://github.com/mcballard/The_Other_Guys_P2
			This repository will be used for this project specifically, for assistance on being added as collaborator
				please contact the repo owner for invitation.

		Each contributor will be assigned specific modules to work on and create their own branches to reduce the risk
			of creating excessive merge errors and protecting the main branch from corruption.

		For change made that the most recent version of main is in your local repo:
		    git pull (inside main branch git checkout main)
		    after changes are made checkout a branch named after yourself with a description of the changes
		    git checkout -b your_name_the_description
		    git add .
		    git commit -m "describe it some more"
		    git push (will create error use the git push --upstream stuff it creates for you by copying it
		        and pasting it into the command line)
		    confirm the changes by going to the repo and creating the pull request and confirming the merge into main
		    git checkout main
		    git pull (to get the latest build)

		A spreadsheet tracking module progress and branch owners for said module will be maintained in the repo
		    main branch in a documentation folder.

		Any work should be committed and push to the specific branches as appropriate (daily at least) to ensure
			branches can be integrated successfully between sprints.

		Any concerns should be brought to the team lead to be addressed directly or passed along to the project owner.


	Best coding practices to be followed:

		All variable names should be spelled out completely (i.e. employee_id).

		Development should be behaviour driven and test driven:
			Each module in each tier should have a separate suite of unit tests consisting of at least:
				Data layer methods:
					one positive test
				Service layer methods:
					one positive test
					all business logic must have negative tests (error catching)
					mocking and stubbing should be used where appropriate
				API methods:
					must all have a positive test using Postman
					must have negative tests for all possible errors for each type of request

		Integration testing and end to end testing:
			We utilized Postman for some integration testing <input end to end tech when we get there>.

	Defect and bug reporting:

		Defect reports:
			These should be updated and reported weekly to include:
				What bugs are present?
				What is their priority?
				What is their severity?
				Who is assigned to the effected modules?

		Test results:
			Unit testing results will be stored in the repo in html files.